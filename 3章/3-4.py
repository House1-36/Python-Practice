# 俺が嫌いな繰り返し(特にfor文)

# while文とは
# while文は、条件がTrueの間、繰り返し処理を行う文です。
# 例えば、以下のように書くことができます。

# while 条件:
#     繰り返し処理

# ここでは、while文を使って1から10までの数字を出力する例を示します。
a = 1
while a < 11:
    print(a, end=' ')
    a += 1

# 実際に実行してみよう

# while文は、whileの後の条件がFalseになるまで繰り返します。

# 次にfor文です

# for文とはリストに格納された要素を順番に取り出して処理する文です。
# 例えば、以下のように書くことができます。

# for 変数 in リスト:
#     繰り返し処理

# ここでは、for文を使って1から10までの数字を出力する例を示します。

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]
for i in a:
    print(i, end=' ')

# 実際に実行してみよう

# for文はrange関数を使うと、より簡単に書くことができます。
# さっきの例だと

for i in range(1, 11):
    print(i, end=' ')

# という感じで書くことができます。

# rangeの構文まとめ

# range(stop)   # 0からstop-1までの整数を生成
# range(start, stop)  # startからstop-1までの整数を生成
# range(start, stop, step)  # startからstop-1まで、step刻みの整数を生成

# break文とcontinue文
# break文は、ループを強制的に終了させるための文です。
# 例えば、以下のように書くことができます。

for i in range(1, 100):
    print(i, end=' ')
    if i == 50:
        break

# 実行してみよう

# 50で止まったのがわかるかな?

# continue文は、ループの現在の反復をスキップして次の反復に進むための文です。
# 例えば、以下のように書くことができます。

for i in range(1, 100):
    if i % 2 == 0:  # 偶数の場合
        continue
    print(i, end=' ')
# 実行してみよう

# ここでは、1から100までの数字のうち、偶数をスキップして奇数だけを出力しています。

# これで、while文とfor文の基本的な使い方がわかりましたね。
# これらの文を使うことで、繰り返し処理を効率的に行うことができます。

# ループ処理のネスト
# ループ処理をネストすることで、複雑なデータ構造を扱うことができます。

# 例えば、九九の表を作成する場合、以下のように書くことができます。

for a in range(1, 10):
    print()
    for b in range(1,10):
        print(f'{a} × {b} = {a * b} ', end=' ')

# 実行してみよう